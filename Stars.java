 

//打印空心金字塔

public class Stars {
	public static void main(String[] args) {
//		1.打出一个矩形
//		*****
//	    *****
//		*****
		
//		2.打出一半
//		*
//		**
//		***
//		****

//		3.打印整个金字塔
//		    *            第1层1个*    公式为：2*层数-1    第1层4个空格  公式为*总层数-当前层数
//		   ***           第2层3个*                      第2层3个空格
//        *****          第3层5个*                      第3层2个空格
//		 *******         第4层7个*                      第4层1个空格
//		*********        第5层9个*                      第5层0个空格
		
//		4.打印空心金字塔
//		    *            第1层1个*      输出的是当前行的第一个位置和最后一个位置为*
//		   * *           第2层2个*
//        *	  *          第3层2个*
//		 *     *         
//		*********        第5层9个*     最后一行全部输出
		
//     5.先死后活
//		int rows 金字塔的层数，替换出5
		
		
	int rows = 5;
	for(int i = 1;i <= rows;i++) {           //i表示层数
			//在输出*前先输出空格
			for(int k = 1;k <= rows - i;k++) {
			System.out.print(" ");
			}
			//打印每层的*的个数
			for(int j = 1;j <= 2 * i - 1;j++) {       //在这里将原本的for(int j = 1;j <= i;j++)中的i换成2*i-1 由原本的一半变成一个
			//当前行第一个位置和最后一个位置是*，并且最后一行输出*
            //否则其他情况输出空格
			//	if(j == 1 || j == 2 * i - 1 || i == rows) {
					
				if(j == 1 || j == 2 * i - 1 ) {
					System.out.print("*");
				}else {
					System.out.print(" ");
					
				}
					
		}
		     System.out.print("\n");
	    }
	

//     打印菱形
//思路打印*和空格与上面相同，但是行数逐渐减小需要用i--
	
	    for(int i = rows - 1;i >= 1;i--) {           //i表示层数    rows是行数，rows - 1就是下半部分第一层的行数
	    	                                                     //i>=1就会进去下一行直到i<1了就结束了
		//在输出*前先输出空格
		    for(int k = 1;k <= rows - i;k++) {
		    System.out.print(" "); 
		    }
		//打印每层的*的个数
		    for(int j = 1;j <= 2 * i - 1;j++) {       //在这里将原本的for(int j = 1;j <= i;j++)中的i换成2*i-1 由原本的一半变成一个
		//当前行第一个位置和最后一个位置是*，并且最后一行输出*
        //否则其他情况输出空格
		//	if(j == 1 || j == 2 * i - 1 || i == rows) {
			
		    	if(j == 1 || j == 2 * i - 1 ) {
				System.out.print("*");
			}else {
				System.out.print(" ");
				
			}
				
	  }
	       System.out.print("\n");
      }
		
	}
	
	}